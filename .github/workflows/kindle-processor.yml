name: Process Kindle Notes

on:
  workflow_dispatch:  # Allows manual trigger if needed
  schedule:
    - cron: '*/10 * * * *'  # Every 10 minutes

jobs:
  process-emails:
    runs-on: ubuntu-latest
    steps:
      - name: Process Kindle Emails
        run: |
          # Wait until we're at the start of a 10-minute interval (X:X0)
          sleep $(( 60 - $(date +%s) % 60 ))
          
          echo "Processing Kindle emails..."
          response=$(curl -s -m 30 -w "\n%{http_code}" "https://${{ secrets.VERCEL_URL }}/api/index")
          status_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | head -n-1)
          
          if [ "$status_code" = "200" ]; then
            echo "Email processing complete: $body"
          else
            echo "Error processing emails: $body"
            exit 1
          fi

  process-text:
    needs: process-emails  # Make this job wait for emails to finish
    runs-on: ubuntu-latest
    steps:
      - name: Wait for next minute
        run: |
          # Ensure we start at X:X1
          sleep $(( 60 - $(date +%s) % 60 + 1 ))
          
      - name: Process Text Files
        run: |
          echo "Starting text file processing with 30s timeout..."
          
          # Step 1: Queue file
          echo "Step 1/3: Queueing file for processing"
          response=$(curl -s -m 30 "https://${{ secrets.VERCEL_URL }}/api/distill_text")
          echo "Response received:"
          echo "$response" | jq '.'
          
          if [ "$(echo "$response" | jq -r '.status')" = "queued" ]; then
            temp_id=$(echo "$response" | jq -r '.temp_id')
            original_id=$(echo "$response" | jq -r '.original_id')
            filename=$(echo "$response" | jq -r '.original_file')
            
            echo "-------------------------------------------"
            echo "File queued successfully:"
            echo "Filename: $filename"
            echo "Temp ID: $temp_id"
            echo "-------------------------------------------"
            
            # Step 2: Process queued file
            echo "Step 2/3: Processing file with OpenAI"
            sleep 2  # Brief pause between steps
            response=$(curl -s -m 30 "https://${{ secrets.VERCEL_URL }}/api/process_queued?temp_id=${temp_id}")
            echo "Response received:"
            echo "$response" | jq '.'
            
            if [ "$(echo "$response" | jq -r '.status')" = "processed" ]; then
              result_id=$(echo "$response" | jq -r '.result_id')
              
              echo "-------------------------------------------"
              echo "Processing complete"
              echo "Result ID: $result_id"
              echo "-------------------------------------------"
              
              # Step 3: Save results
              echo "Step 3/3: Saving processed file"
              sleep 2
              response=$(curl -s -m 30 "https://${{ secrets.VERCEL_URL }}/api/save_processed?result_id=${result_id}&original_id=${original_id}")
              echo "Response received:"
              echo "$response" | jq '.'
              
              if [ "$(echo "$response" | jq -r '.status')" = "completed" ]; then
                echo "-------------------------------------------"
                echo "File processing completed successfully"
                echo "Original file: $filename"
                echo "-------------------------------------------"
              else
                echo "Error saving processed file"
                exit 1
              fi
            else
              echo "Error processing file"
              exit 1
            fi
          elif [ "$(echo "$response" | jq -r '.status')" = "no_files" ]; then
            echo "No new files to process"
          else
            echo "Error queueing file"
            exit 1
          fi